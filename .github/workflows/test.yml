name: 測試自動化流程

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每日自動測試（UTC 時間 02:00，即台灣時間 10:00）
    - cron: '0 2 * * *'

jobs:
  # 基礎測試任務
  test:
    name: 測試 Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 安裝 uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: 安裝依賴套件
      run: |
        uv sync --all-extras
        
    - name: 執行程式碼風格檢查
      run: |
        uv run black --check src/ tests/
        uv run isort --check-only src/ tests/
        uv run flake8 src/ tests/
        
    - name: 執行型別檢查
      run: |
        uv run mypy src/
        
    - name: 執行單元測試
      run: |
        uv run pytest tests/ -v --tb=short \
          --cov=src/chinese_graphrag \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -m "not integration and not slow and not chinese"
          
    - name: 上傳測試覆蓋率報告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # 整合測試任務
  integration-test:
    name: 整合測試
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: 安裝 uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: 安裝依賴套件
      run: |
        uv sync --all-extras
        
    - name: 執行整合測試
      run: |
        uv run pytest tests/integration/ -v --tb=short \
          --cov=src/chinese_graphrag \
          --cov-report=xml \
          --cov-report=html \
          -m "integration and not slow"
      env:
        # 設定測試環境變數
        GRAPHRAG_TEST_MODE: "true"
        GRAPHRAG_LOG_LEVEL: "INFO"
        
    - name: 上傳整合測試覆蓋率報告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-integration
        fail_ci_if_error: false

  # 效能測試任務
  performance-test:
    name: 效能測試
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: 安裝 uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: 安裝依賴套件和效能測試工具
      run: |
        uv sync --all-extras
        uv add pytest-benchmark
        
    - name: 執行效能測試
      run: |
        uv run pytest tests/integration/test_performance.py -v --tb=short \
          --benchmark-only \
          --benchmark-json=benchmark.json \
          -m "slow"
      env:
        GRAPHRAG_TEST_MODE: "true"
        
    - name: 儲存效能測試結果
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          benchmark.json
          benchmark.html

  # 中文特定功能測試
  chinese-test:
    name: 中文功能測試
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: 安裝 uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: 安裝依賴套件
      run: |
        uv sync --all-extras
        
    - name: 執行中文功能測試
      run: |
        uv run pytest tests/integration/test_chinese_features.py -v --tb=short \
          --cov=src/chinese_graphrag \
          --cov-report=xml \
          -m "chinese"
      env:
        GRAPHRAG_TEST_MODE: "true"
        LANG: zh_TW.UTF-8
        LC_ALL: zh_TW.UTF-8
        
    - name: 上傳中文測試覆蓋率報告
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: chinese
        name: codecov-chinese
        fail_ci_if_error: false

  # 安全掃描任務
  security-scan:
    name: 安全掃描
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 執行 Bandit 安全掃描
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: 執行依賴套件安全掃描
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: 上傳安全掃描報告
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 程式碼品質檢查
  quality-gate:
    name: 品質閘門
    runs-on: ubuntu-latest
    needs: [test, integration-test, chinese-test]
    if: always()
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 下載測試覆蓋率報告
      uses: actions/download-artifact@v3
      continue-on-error: true
      
    - name: 品質閘門檢查
      run: |
        echo "執行品質閘門檢查..."
        
        # 檢查測試結果
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "❌ 單元測試失敗"
          exit 1
        fi
        
        if [ "${{ needs.integration-test.result }}" != "success" ]; then
          echo "❌ 整合測試失敗"  
          exit 1
        fi
        
        if [ "${{ needs.chinese-test.result }}" != "success" ]; then
          echo "❌ 中文功能測試失敗"
          exit 1
        fi
        
        echo "✅ 所有測試通過品質閘門"
        
    - name: 發送通知
      if: failure()
      run: |
        echo "測試失敗，請檢查測試結果"
        # 這裡可以加入 Slack、Email 或其他通知機制

  # 測試報告生成
  test-report:
    name: 生成測試報告
    runs-on: ubuntu-latest
    needs: [test, integration-test, chinese-test, security-scan]
    if: always()
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定 Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: 安裝報告生成工具
      run: |
        pip install jinja2 pyyaml
        
    - name: 下載所有測試結果
      uses: actions/download-artifact@v3
      continue-on-error: true
      
    - name: 生成綜合測試報告
      run: |
        python scripts/generate_test_report.py \
          --output-dir=test-reports \
          --format=html,json \
          --include-coverage=true \
          --include-performance=true
          
    - name: 上傳測試報告
      uses: actions/upload-artifact@v3
      with:
        name: test-reports
        path: test-reports/
        retention-days: 30
        
    - name: 部署測試報告到 GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./test-reports
        destination_dir: test-reports