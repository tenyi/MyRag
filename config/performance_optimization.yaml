# Chinese GraphRAG 效能優化配置檔案
# 此檔案包含所有效能優化相關的配置選項

# 批次處理優化設定
batch_optimization:
  enabled: true
  default_batch_size: 32
  max_batch_size: 128
  min_batch_size: 8
  parallel_workers: 4
  memory_threshold_mb: 1024.0
  enable_memory_monitoring: true
  enable_adaptive_sizing: true
  gc_threshold: 0.8
  retry_attempts: 3
  retry_delay: 1.0

# 查詢優化設定
query_optimization:
  cache_enabled: true
  cache_backend: "memory"  # memory, redis, hybrid
  cache_ttl_seconds: 3600  # 1小時
  cache_max_size: 10000
  enable_preloading: true
  preload_patterns:
    - "常見查詢*"
    - "熱門主題*"
    - "系統查詢*"
  
  # Redis 設定 (當 cache_backend 為 redis 或 hybrid 時)
  redis:
    url: "redis://localhost:6379"
    db: 0
    password: null
    connection_pool_size: 10
    socket_timeout: 5.0
  
  # 語義快取設定
  semantic_cache:
    enabled: true
    similarity_threshold: 0.95
    embedding_model: "text-embedding-ada-002"
    max_semantic_cache_size: 5000

# 成本優化設定
cost_optimization:
  tracking_enabled: true
  budget_limit_usd: 100.0
  alert_threshold: 0.8  # 80% 預算時發出警報
  quality_threshold: 0.8
  strict_budget_enforcement: false
  
  # 模型定價 (每1K tokens的價格，USD)
  model_pricing:
    "gpt-3.5-turbo":
      input: 0.0015
      output: 0.002
    "gpt-4":
      input: 0.03
      output: 0.06
    "gpt-4-turbo":
      input: 0.01
      output: 0.03
    "text-embedding-ada-002":
      input: 0.0001
      output: 0.0001
    "text-embedding-3-small":
      input: 0.00002
      output: 0.00002
    "text-embedding-3-large":
      input: 0.00013
      output: 0.00013
  
  # 模型選擇策略
  model_selection:
    default_strategy: "balanced"  # cost, quality, balanced
    operation_strategies:
      embedding: "cost"
      text_generation: "balanced"
      summarization: "quality"
      translation: "balanced"
  
  # 使用量限制
  usage_limits:
    daily_token_limit: 1000000
    hourly_token_limit: 100000
    per_model_limits:
      "gpt-4": 50000  # 每日限制
      "gpt-4-turbo": 100000

# 效能監控設定
performance_monitoring:
  enabled: true
  collection_interval: 5.0  # 秒
  history_size: 1000
  enable_gpu_monitoring: true
  
  # 警報閾值
  alert_thresholds:
    cpu_usage: 80.0
    memory_usage: 85.0
    disk_usage: 90.0
    gpu_usage: 85.0
    gpu_memory_usage: 90.0
    error_rate: 5.0
    response_time_ms: 5000.0
  
  # 自訂指標
  custom_metrics:
    - name: "active_connections"
      collector: "get_active_connections"
      interval: 10.0
    - name: "queue_size"
      collector: "get_processing_queue_size"
      interval: 5.0
    - name: "cache_hit_rate"
      collector: "get_cache_hit_rate"
      interval: 30.0
  
  # 資料保留設定
  data_retention:
    raw_metrics_days: 7
    aggregated_metrics_days: 30
    alert_history_days: 90

# 基準測試設定
benchmarking:
  enabled: true
  auto_benchmark_interval: 3600  # 1小時自動執行一次
  benchmark_iterations: 10
  warmup_iterations: 2
  
  # 預定義測試
  predefined_tests:
    - name: "embedding_performance"
      function: "benchmark_embedding"
      params:
        batch_sizes: [16, 32, 64, 128]
        text_lengths: [100, 500, 1000]
    
    - name: "query_performance"
      function: "benchmark_query"
      params:
        query_types: ["simple", "complex", "semantic"]
        cache_scenarios: ["cold", "warm", "hot"]
    
    - name: "batch_processing"
      function: "benchmark_batch_processing"
      params:
        item_counts: [100, 500, 1000, 5000]
        worker_counts: [1, 2, 4, 8]

# 儲存設定
storage:
  base_path: "logs/performance"
  
  # 日誌設定
  logging:
    level: "INFO"
    format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    file_rotation: "daily"
    max_file_size_mb: 100
    backup_count: 30
  
  # 資料匯出設定
  export:
    formats: ["json", "csv", "parquet"]
    compression: "gzip"
    auto_export_interval: 86400  # 24小時
    export_path: "exports/performance"

# 分散式設定
distributed:
  enabled: false
  mode: "coordinator"  # coordinator, worker
  
  # 協調器設定
  coordinator:
    redis_url: "redis://coordinator:6379"
    heartbeat_interval: 30.0
    worker_timeout: 120.0
  
  # 工作節點設定
  worker:
    node_id: "worker-1"
    coordinator_url: "redis://coordinator:6379"
    capabilities: ["embedding", "query", "inference"]
    max_concurrent_tasks: 10

# 安全設定
security:
  enable_authentication: false
  api_key: null
  rate_limiting:
    enabled: true
    requests_per_minute: 1000
    burst_size: 100
  
  # 資料加密
  encryption:
    enabled: false
    key_file: "keys/performance.key"
    algorithm: "AES-256-GCM"

# 整合設定
integrations:
  # Prometheus 監控
  prometheus:
    enabled: false
    port: 8000
    metrics_path: "/metrics"
  
  # Grafana 儀表板
  grafana:
    enabled: false
    dashboard_url: "http://grafana:3000"
    api_key: null
  
  # 警報通知
  alerting:
    enabled: true
    channels:
      - type: "email"
        config:
          smtp_server: "smtp.gmail.com"
          smtp_port: 587
          username: "alerts@example.com"
          password: "password"
          recipients: ["admin@example.com"]
      
      - type: "slack"
        config:
          webhook_url: "https://hooks.slack.com/services/..."
          channel: "#alerts"
          username: "Performance Bot"
      
      - type: "webhook"
        config:
          url: "https://api.example.com/alerts"
          headers:
            Authorization: "Bearer token"

# 開發和除錯設定
development:
  debug_mode: false
  enable_profiling: false
  profiling_output: "profiles/"
  
  # 測試設定
  testing:
    mock_external_services: false
    test_data_path: "test_data/"
    enable_test_metrics: true
  
  # 效能分析
  performance_analysis:
    enable_memory_profiling: false
    enable_cpu_profiling: false
    profiling_interval: 60.0
    max_profile_files: 10

# 環境特定設定
environments:
  development:
    batch_optimization:
      default_batch_size: 8
      parallel_workers: 2
    performance_monitoring:
      collection_interval: 10.0
    cost_optimization:
      budget_limit_usd: 10.0
  
  staging:
    batch_optimization:
      default_batch_size: 16
      parallel_workers: 2
    performance_monitoring:
      collection_interval: 5.0
    cost_optimization:
      budget_limit_usd: 50.0
  
  production:
    batch_optimization:
      default_batch_size: 32
      parallel_workers: 4
    performance_monitoring:
      collection_interval: 5.0
    cost_optimization:
      budget_limit_usd: 200.0
      strict_budget_enforcement: true