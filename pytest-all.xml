<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="4" failures="9" skipped="44" tests="472" time="25.137" timestamp="2025-08-02T12:04:38.664643+08:00" hostname="MacBook-Pro-M1.local"><testcase classname="tests.integration.test_chinese_features.TestChineseTextProcessing" name="test_chinese_tokenization" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:42: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseTextProcessing" name="test_chinese_encoding_handling" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:74: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseTextProcessing" name="test_traditional_simplified_conversion" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:95: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseTextProcessing" name="test_chinese_punctuation_handling" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:136: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseTextProcessing" name="test_chinese_number_extraction" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:175: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseTextProcessing" name="test_chinese_semantic_understanding" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:202: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseTextProcessing" name="test_chinese_text_chunking" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:252: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseQueryProcessing" name="test_chinese_query_intent_classification" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:335: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseQueryProcessing" name="test_chinese_entity_extraction" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:363: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseQueryProcessing" name="test_chinese_query_expansion" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:407: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseQueryProcessing" name="test_chinese_answer_generation" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:443: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseKnowledgeGraph" name="test_chinese_entity_recognition" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:503: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseKnowledgeGraph" name="test_chinese_relation_extraction" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:549: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_chinese_features.TestChineseKnowledgeGraph" name="test_chinese_knowledge_graph_construction" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_chinese_features.py:606: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestEndToEndIndexing" name="test_document_processing_pipeline" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:207: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestEndToEndIndexing" name="test_embedding_generation" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:240: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestEndToEndIndexing" name="test_vector_store_operations" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:259: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestEndToEndIndexing" name="test_full_indexing_pipeline" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:294: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestEndToEndQuerying" name="test_chinese_query_processing" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:433: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestEndToEndQuerying" name="test_semantic_search" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:464: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestEndToEndQuerying" name="test_local_search_query" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:492: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestEndToEndQuerying" name="test_global_search_query" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:529: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestEndToEndQuerying" name="test_full_query_pipeline" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:566: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestSystemIntegration" name="test_indexing_and_querying_integration" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:642: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestSystemIntegration" name="test_error_handling_integration" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:694: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_end_to_end.TestSystemIntegration" name="test_configuration_integration" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_end_to_end.py:723: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_performance.TestPerformanceBenchmarks" name="test_document_processing_performance" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_performance.py:38: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_performance.TestPerformanceBenchmarks" name="test_embedding_generation_performance" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_performance.py:96: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_performance.TestPerformanceBenchmarks" name="test_vector_search_performance" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_performance.py:144: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_performance.TestPerformanceBenchmarks" name="test_concurrent_processing_performance" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_performance.py:210: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_performance.TestPerformanceBenchmarks" name="test_memory_usage_performance" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_performance.py:262: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_performance.TestPerformanceBenchmarks" name="test_async_processing_performance" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_performance.py:321: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_performance.TestPerformanceBenchmarks" name="test_end_to_end_performance" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_performance.py:367: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_performance.TestStressTests" name="test_high_concurrency_stress" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_performance.py:470: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.integration.test_performance.TestStressTests" name="test_memory_stress" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/integration/test_performance.py:519: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_optimizer_manager_initialization" time="0.020" /><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_batch_processing_optimization" time="0.569" /><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_query_optimization" time="0.108" /><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_cost_optimization" time="0.011" /><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_performance_monitoring" time="2.515" /><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_benchmark_execution" time="1.398" /><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_optimization_report" time="0.011"><failure message="AttributeError: 'QueryOptimizer' object has no attribute 'get_cache_stats'">tests/performance/test_performance_integration.py:288: in test_optimization_report
    report = optimizer_manager.get_optimization_report(duration_minutes=1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/performance/optimizer_manager.py:476: in get_optimization_report
    cache_stats = self.query_optimizer.get_cache_stats()
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'QueryOptimizer' object has no attribute 'get_cache_stats'</failure></testcase><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_config_persistence" time="0.003" /><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_context_manager" time="0.004" /><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_alert_handling" time="0.004" /><testcase classname="tests.performance.test_performance_integration.TestPerformanceIntegration" name="test_error_handling" time="0.005" /><testcase classname="tests.test_config.test_loader.TestConfigLoader" name="test_load_valid_config" time="0.005" /><testcase classname="tests.test_config.test_loader.TestConfigLoader" name="test_env_var_substitution" time="0.003" /><testcase classname="tests.test_config.test_loader.TestConfigLoader" name="test_env_var_with_default" time="0.003" /><testcase classname="tests.test_config.test_loader.TestConfigLoader" name="test_missing_env_var_error" time="0.002" /><testcase classname="tests.test_config.test_loader.TestConfigLoader" name="test_invalid_model_type_error" time="0.002" /><testcase classname="tests.test_config.test_loader.TestConfigLoader" name="test_missing_default_model_error" time="0.002" /><testcase classname="tests.test_config.test_loader.TestConfigLoader" name="test_create_default_config" time="0.010" /><testcase classname="tests.test_config.test_loader.TestConfigLoader" name="test_nonexistent_config_file" time="0.000" /><testcase classname="tests.test_config.test_loader.TestConfigLoader" name="test_invalid_yaml_syntax" time="0.001" /><testcase classname="tests.test_config.test_models.TestLLMConfig" name="test_valid_llm_config" time="0.000" /><testcase classname="tests.test_config.test_models.TestLLMConfig" name="test_invalid_temperature" time="0.000" /><testcase classname="tests.test_config.test_models.TestLLMConfig" name="test_azure_openai_config" time="0.000" /><testcase classname="tests.test_config.test_models.TestEmbeddingConfig" name="test_openai_embedding_config" time="0.000" /><testcase classname="tests.test_config.test_models.TestEmbeddingConfig" name="test_bge_m3_config" time="0.000" /><testcase classname="tests.test_config.test_models.TestEmbeddingConfig" name="test_invalid_batch_size" time="0.000" /><testcase classname="tests.test_config.test_models.TestVectorStoreConfig" name="test_lancedb_config" time="0.000" /><testcase classname="tests.test_config.test_models.TestGraphRAGConfig" name="test_minimal_config" time="0.000" /><testcase classname="tests.test_config.test_models.TestGraphRAGConfig" name="test_get_llm_config" time="0.000" /><testcase classname="tests.test_config.test_models.TestGraphRAGConfig" name="test_get_embedding_config" time="0.000" /><testcase classname="tests.test_config.test_models.TestGraphRAGConfig" name="test_default_model_configs" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestModelPerformanceMetrics" name="test_record_and_retrieve_metrics" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestDefaultModelSelectionStrategy" name="test_select_default_models" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestCostOptimizedSelectionStrategy" name="test_cost_optimization_disabled" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestCostOptimizedSelectionStrategy" name="test_cost_optimization_enabled" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestCostOptimizedSelectionStrategy" name="test_chinese_embedding_preference" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestAdaptiveSelectionStrategy" name="test_task_based_model_selection" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestAdaptiveSelectionStrategy" name="test_chinese_context_preference" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestModelSelector" name="test_select_llm_model" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestModelSelector" name="test_select_embedding_model" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestModelSelector" name="test_fallback_model_selection" time="0.000" /><testcase classname="tests.test_config.test_strategy.TestModelSelector" name="test_record_model_performance" time="0.000" /><testcase classname="tests.test_config_system.TestConfigLoader" name="test_load_valid_config" time="0.004" /><testcase classname="tests.test_config_system.TestConfigLoader" name="test_load_config_with_env_vars" time="0.003" /><testcase classname="tests.test_config_system.TestConfigLoader" name="test_load_nonexistent_config" time="0.001" /><testcase classname="tests.test_config_system.TestConfigLoader" name="test_create_default_config" time="0.009"><failure message="src.chinese_graphrag.config.loader.ConfigurationError: 載入配置時發生錯誤: 環境變數 GRAPHRAG_API_KEY 未設定">src/chinese_graphrag/config/loader.py:62: in load_config
    processed_config = self._substitute_env_vars(raw_config)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/config/loader.py:94: in _substitute_env_vars
    return {k: self._substitute_env_vars(v) for k, v in config.items()}
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/config/loader.py:94: in &lt;dictcomp&gt;
    return {k: self._substitute_env_vars(v) for k, v in config.items()}
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/config/loader.py:94: in _substitute_env_vars
    return {k: self._substitute_env_vars(v) for k, v in config.items()}
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/config/loader.py:94: in &lt;dictcomp&gt;
    return {k: self._substitute_env_vars(v) for k, v in config.items()}
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/config/loader.py:94: in _substitute_env_vars
    return {k: self._substitute_env_vars(v) for k, v in config.items()}
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/config/loader.py:94: in &lt;dictcomp&gt;
    return {k: self._substitute_env_vars(v) for k, v in config.items()}
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/config/loader.py:98: in _substitute_env_vars
    return self._replace_env_vars_in_string(config)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/config/loader.py:116: in _replace_env_vars_in_string
    return self.env_pattern.sub(replace_match, value)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/config/loader.py:113: in replace_match
    raise ConfigurationError(f"環境變數 {env_var} 未設定")
E   src.chinese_graphrag.config.loader.ConfigurationError: 環境變數 GRAPHRAG_API_KEY 未設定

During handling of the above exception, another exception occurred:
tests/test_config_system.py:137: in test_create_default_config
    config = loader.load_config()
             ^^^^^^^^^^^^^^^^^^^^
src/chinese_graphrag/config/loader.py:78: in load_config
    raise ConfigurationError(f"載入配置時發生錯誤: {e}")
E   src.chinese_graphrag.config.loader.ConfigurationError: 載入配置時發生錯誤: 環境變數 GRAPHRAG_API_KEY 未設定</failure></testcase><testcase classname="tests.test_config_system.TestEnvironmentManager" name="test_get_env_var_with_default" time="0.000" /><testcase classname="tests.test_config_system.TestEnvironmentManager" name="test_get_env_var_required_missing" time="0.000" /><testcase classname="tests.test_config_system.TestEnvironmentManager" name="test_type_conversion" time="0.001" /><testcase classname="tests.test_config_system.TestEnvironmentManager" name="test_load_env_file" time="0.001" /><testcase classname="tests.test_config_system.TestConfigValidator" name="test_validate_valid_config" time="0.001" /><testcase classname="tests.test_config_system.TestConfigValidator" name="test_validate_invalid_chunk_config" time="0.000" /><testcase classname="tests.test_config_system.TestConfigValidator" name="test_validate_missing_default_models" time="0.000" /><testcase classname="tests.test_config_system.TestConfigIntegration" name="test_full_config_workflow" time="0.004" /><testcase classname="tests.test_config_system.TestConfigIntegration" name="test_config_with_validation_warnings" time="0.004" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseEmbeddingConfig" name="test_default_config" time="0.000" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseEmbeddingConfig" name="test_custom_config" time="0.000" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_init" time="0.002" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_build_chinese_char_weights" time="0.001" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_calculate_chinese_weight" time="0.003" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_preprocess_texts" time="0.304" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_postprocess_embeddings" time="0.003" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_embed_texts_success" time="0.003" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_embed_texts_fallback" time="0.004" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_embed_texts_all_fail" time="0.005" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_evaluate_chinese_quality" time="0.007" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_is_chinese_dominant" time="0.001" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedEmbeddingService" name="test_get_model_info" time="0.001" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestCreateChineseOptimizedService" name="test_create_chinese_optimized_service" time="0.001" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestCreateChineseOptimizedService" name="test_create_with_default_params" time="0.001" /><testcase classname="tests.test_embeddings.test_chinese_optimized.TestChineseOptimizedIntegration" name="test_real_model_integration" time="0.000"><skipped type="pytest.skip" message="需要實際模型檔案">/Users/tenyi/Projects/MyRag/tests/test_embeddings/test_chinese_optimized.py:331: 需要實際模型檔案</skipped></testcase><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_init" time="0.001" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_register_service" time="0.001" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_unregister_service" time="0.001" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_get_service_not_found" time="0.001" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_list_services" time="0.002" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_load_all_models" time="0.003" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_embed_texts_success" time="0.002" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_embed_texts_fallback" time="0.003" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_embed_texts_no_fallback" time="0.002" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_smart_route_request_fastest" time="0.002" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_smart_route_request_least_loaded" time="0.002" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_health_check_all" time="0.003" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_get_metrics_summary" time="0.001" /><testcase classname="tests.test_embeddings.test_embedding_manager.TestEmbeddingManager" name="test_context_manager" time="0.002" /><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingCache" name="test_memory_cache_basic" time="0.001"><failure message="KeyError: 'memory_usage_mb'">tests/test_embeddings/test_performance_optimization.py:64: in test_memory_cache_basic
    assert stats["memory_usage_mb"] &gt; 0
           ^^^^^^^^^^^^^^^^^^^^^^^^
E   KeyError: 'memory_usage_mb'</failure></testcase><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingCache" name="test_memory_cache_lru_eviction" time="0.001"><failure message="assert 10 &lt; 10">tests/test_embeddings/test_performance_optimization.py:95: in test_memory_cache_lru_eviction
    assert stats["entry_count"] &lt; 10  # 應該有些項目被淘汰
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   assert 10 &lt; 10</failure></testcase><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingCache" name="test_memory_cache_lfu_eviction" time="0.001" /><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingCache" name="test_disk_cache_basic" time="0.003" /><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingCache" name="test_disk_cache_persistence" time="0.002" /><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingCache" name="test_multi_level_cache" time="0.002"><failure message="KeyError: 'memory_entries'">tests/test_embeddings/test_performance_optimization.py:197: in test_multi_level_cache
    assert stats["memory_entries"] &gt; 0
           ^^^^^^^^^^^^^^^^^^^^^^^
E   KeyError: 'memory_entries'</failure></testcase><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingCache" name="test_multi_level_cache_promotion" time="0.005" /><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingCache" name="test_cache_factory" time="0.002" /><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingManagerIntegration" name="test_manager_with_cache" time="0.002"><failure message="TypeError: EmbeddingManager.__init__() got an unexpected keyword argument 'embedding_service'">tests/test_embeddings/test_performance_optimization.py:288: in test_manager_with_cache
    manager = EmbeddingManager(
E   TypeError: EmbeddingManager.__init__() got an unexpected keyword argument 'embedding_service'</failure></testcase><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingManagerIntegration" name="test_manager_batch_processing" time="0.001"><failure message="TypeError: EmbeddingManager.__init__() got an unexpected keyword argument 'embedding_service'">tests/test_embeddings/test_performance_optimization.py:309: in test_manager_batch_processing
    manager = EmbeddingManager(
E   TypeError: EmbeddingManager.__init__() got an unexpected keyword argument 'embedding_service'</failure></testcase><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingManagerIntegration" name="test_manager_error_handling" time="0.001"><failure message="TypeError: EmbeddingManager.__init__() got an unexpected keyword argument 'embedding_service'">tests/test_embeddings/test_performance_optimization.py:329: in test_manager_error_handling
    manager = EmbeddingManager(embedding_service=failing_service)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: EmbeddingManager.__init__() got an unexpected keyword argument 'embedding_service'</failure></testcase><testcase classname="tests.test_embeddings.test_performance_optimization.TestEmbeddingManagerIntegration" name="test_manager_metrics" time="0.001"><failure message="TypeError: EmbeddingManager.__init__() got an unexpected keyword argument 'embedding_service'">tests/test_embeddings/test_performance_optimization.py:338: in test_manager_metrics
    manager = EmbeddingManager(embedding_service=mock_embedding_service)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: EmbeddingManager.__init__() got an unexpected keyword argument 'embedding_service'</failure></testcase><testcase classname="tests.test_exception_handling.TestChineseGraphRAGError" name="test_basic_error_creation" time="0.000" /><testcase classname="tests.test_exception_handling.TestChineseGraphRAGError" name="test_error_with_full_metadata" time="0.000" /><testcase classname="tests.test_exception_handling.TestChineseGraphRAGError" name="test_error_serialization" time="0.000" /><testcase classname="tests.test_exception_handling.TestSpecificErrors" name="test_system_error" time="0.000" /><testcase classname="tests.test_exception_handling.TestSpecificErrors" name="test_configuration_error" time="0.000" /><testcase classname="tests.test_exception_handling.TestSpecificErrors" name="test_validation_error" time="0.000" /><testcase classname="tests.test_exception_handling.TestSpecificErrors" name="test_processing_error" time="0.000" /><testcase classname="tests.test_exception_handling.TestSpecificErrors" name="test_resource_error" time="0.000" /><testcase classname="tests.test_exception_handling.TestSpecificErrors" name="test_network_error" time="0.000" /><testcase classname="tests.test_exception_handling.TestSpecificErrors" name="test_security_error" time="0.000" /><testcase classname="tests.test_exception_handling.TestGlobalErrorHandler" name="test_handler_creation" time="0.000" /><testcase classname="tests.test_exception_handling.TestGlobalErrorHandler" name="test_error_handling_strategies" time="0.001" /><testcase classname="tests.test_exception_handling.TestGlobalErrorHandler" name="test_retry_strategy" time="0.001" /><testcase classname="tests.test_exception_handling.TestRetryPolicies" name="test_exponential_backoff_policy" time="0.000" /><testcase classname="tests.test_exception_handling.TestRetryPolicies" name="test_linear_backoff_policy" time="0.000" /><testcase classname="tests.test_exception_handling.TestRetryPolicies" name="test_fixed_delay_policy" time="0.000" /><testcase classname="tests.test_exception_handling.TestRetryPolicies" name="test_retry_decorator" time="0.212" /><testcase classname="tests.test_exception_handling.TestRetryPolicies" name="test_retry_decorator_failure" time="0.110" /><testcase classname="tests.test_exception_handling.TestRetryPolicies" name="test_async_retry_decorator" time="0.209" /><testcase classname="tests.test_exception_handling.TestErrorHandlerRegistry" name="test_get_error_handler" time="0.001" /><testcase classname="tests.test_exception_handling.TestErrorHandlerRegistry" name="test_singleton_pattern" time="0.001" /><testcase classname="tests.test_exception_handling.TestThreadSafety" name="test_concurrent_error_handling" time="0.003" /><testcase classname="tests.test_exception_handling.TestErrorHandlingIntegration" name="test_real_world_error_scenario" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/test_exception_handling.py:323: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.test_exception_handling.TestErrorHandlingIntegration" name="test_error_recovery_flow" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/test_exception_handling.py:353: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.test_exceptions.test_consistency.TestConsistencyIssue" name="test_issue_creation" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestConsistencyIssue" name="test_issue_serialization" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestConsistencyReport" name="test_report_creation" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestConsistencyReport" name="test_report_serialization" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestFileSystemChecker" name="test_checker_creation" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestFileSystemChecker" name="test_check_existing_files" time="0.002" /><testcase classname="tests.test_exceptions.test_consistency.TestFileSystemChecker" name="test_check_missing_files" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestFileSystemChecker" name="test_check_size_mismatch" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestFileSystemChecker" name="test_check_hash_mismatch" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestIndexChecker" name="test_checker_creation" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestIndexChecker" name="test_check_missing_index" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestIndexChecker" name="test_check_orphaned_index" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestVectorStoreChecker" name="test_checker_creation" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestVectorStoreChecker" name="test_check_no_vector_store" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestVectorStoreChecker" name="test_check_missing_vectors" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestVectorStoreChecker" name="test_check_orphaned_vectors" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestVectorStoreChecker" name="test_check_vector_dimension" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestMetadataChecker" name="test_checker_creation" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestMetadataChecker" name="test_check_missing_fields" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestMetadataChecker" name="test_check_invalid_timestamp" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestDataConsistencyManager" name="test_manager_creation" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestDataConsistencyManager" name="test_register_checker" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestDataConsistencyManager" name="test_run_consistency_check" time="0.002" /><testcase classname="tests.test_exceptions.test_consistency.TestDataConsistencyManager" name="test_check_with_filters" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestDataConsistencyManager" name="test_checker_error_handling" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestDataConsistencyManager" name="test_auto_fix_issues" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestDataConsistencyManager" name="test_report_history_management" time="0.001" /><testcase classname="tests.test_exceptions.test_consistency.TestDataConsistencyManager" name="test_export_report" time="0.002" /><testcase classname="tests.test_exceptions.test_consistency.TestGlobalConsistencyManager" name="test_get_consistency_manager" time="0.000" /><testcase classname="tests.test_exceptions.test_consistency.TestConsistencyIntegration" name="test_full_consistency_workflow" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/test_exceptions/test_consistency.py:776: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.test_exceptions.test_consistency.TestConsistencyIntegration" name="test_concurrent_consistency_checks" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/test_exceptions/test_consistency.py:867: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.test_exceptions.test_incremental.TestFileMetadata" name="test_metadata_creation" time="0.000" /><testcase classname="tests.test_exceptions.test_incremental.TestFileMetadata" name="test_metadata_serialization" time="0.000" /><testcase classname="tests.test_exceptions.test_incremental.TestChangeRecord" name="test_change_record_creation" time="0.000" /><testcase classname="tests.test_exceptions.test_incremental.TestChangeRecord" name="test_change_record_serialization" time="0.000" /><testcase classname="tests.test_exceptions.test_incremental.TestFileWatcher" name="test_watcher_creation" time="0.001" /><testcase classname="tests.test_exceptions.test_incremental.TestFileWatcher" name="test_add_change_listener" time="0.001" /><testcase classname="tests.test_exceptions.test_incremental.TestFileWatcher" name="test_calculate_file_hash" time="0.001" /><testcase classname="tests.test_exceptions.test_incremental.TestFileWatcher" name="test_detect_encoding" time="0.002" /><testcase classname="tests.test_exceptions.test_incremental.TestFileWatcher" name="test_create_file_metadata" time="0.001" /><testcase classname="tests.test_exceptions.test_incremental.TestFileWatcher" name="test_scan_changes_new_files" time="0.001" /><testcase classname="tests.test_exceptions.test_incremental.TestFileWatcher" name="test_scan_changes_modified_files" time="0.108" /><testcase classname="tests.test_exceptions.test_incremental.TestFileWatcher" name="test_scan_changes_deleted_files" time="0.002" /><testcase classname="tests.test_exceptions.test_incremental.TestFileWatcher" name="test_change_listener_notification" time="0.002" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexStorage" name="test_storage_initialization" time="0.004" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexStorage" name="test_save_and_get_file_metadata" time="0.003" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexStorage" name="test_save_and_get_change_record" time="0.004" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexStorage" name="test_mark_change_processed" time="0.004" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexStorage" name="test_pending_changes_limit" time="0.066" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexManager" name="test_manager_creation" time="0.004" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexManager" name="test_scan_for_changes" time="0.003" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexManager" name="test_process_pending_changes" time="0.006" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexManager" name="test_processing_concurrency_protection" time="0.003" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexManager" name="test_file_change_handling" time="0.003" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexManager" name="test_get_index_statistics" time="0.003" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexManager" name="test_cleanup_old_records" time="0.004" /><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexingIntegration" name="test_full_incremental_workflow" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/test_exceptions/test_incremental.py:618: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexingIntegration" name="test_concurrent_file_operations" time="0.001"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/test_exceptions/test_incremental.py:680: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.test_exceptions.test_incremental.TestIncrementalIndexingIntegration" name="test_error_handling_in_processing" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/test_exceptions/test_incremental.py:716: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.test_exceptions.test_recovery.TestCheckpointMetadata" name="test_metadata_creation" time="0.000" /><testcase classname="tests.test_exceptions.test_recovery.TestCheckpointMetadata" name="test_metadata_serialization" time="0.000" /><testcase classname="tests.test_exceptions.test_recovery.TestSystemState" name="test_state_creation" time="0.000" /><testcase classname="tests.test_exceptions.test_recovery.TestSystemState" name="test_state_serialization" time="0.000" /><testcase classname="tests.test_exceptions.test_recovery.TestFileCheckpointStorage" name="test_storage_initialization" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestFileCheckpointStorage" name="test_save_and_load_checkpoint" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestFileCheckpointStorage" name="test_list_checkpoints" time="0.002" /><testcase classname="tests.test_exceptions.test_recovery.TestFileCheckpointStorage" name="test_delete_checkpoint" time="0.002" /><testcase classname="tests.test_exceptions.test_recovery.TestFileCheckpointStorage" name="test_checksum_validation" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestCheckpointManager" name="test_manager_creation" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestCheckpointManager" name="test_create_checkpoint" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestCheckpointManager" name="test_list_checkpoints_with_filters" time="0.002" /><testcase classname="tests.test_exceptions.test_recovery.TestCheckpointManager" name="test_cleanup_old_checkpoints" time="0.003" /><testcase classname="tests.test_exceptions.test_recovery.TestStateManager" name="test_state_manager_creation" time="0.000" /><testcase classname="tests.test_exceptions.test_recovery.TestStateManager" name="test_register_component" time="0.000" /><testcase classname="tests.test_exceptions.test_recovery.TestStateManager" name="test_capture_current_state" time="0.000" /><testcase classname="tests.test_exceptions.test_recovery.TestStateManager" name="test_component_error_handling" time="0.000" /><testcase classname="tests.test_exceptions.test_recovery.TestStateManager" name="test_state_history_limit" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestStateManager" name="test_compare_states" time="0.000" /><testcase classname="tests.test_exceptions.test_recovery.TestRecoveryManager" name="test_recovery_manager_creation" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestRecoveryManager" name="test_register_recovery_strategy" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestRecoveryManager" name="test_auto_recover_success" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestRecoveryManager" name="test_auto_recover_no_strategy" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestRecoveryManager" name="test_create_recovery_checkpoint" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestRecoveryManager" name="test_perform_recovery" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestGlobalRecoveryManager" name="test_get_recovery_manager" time="0.001" /><testcase classname="tests.test_exceptions.test_recovery.TestRecoveryIntegration" name="test_full_recovery_scenario" time="0.000"><skipped type="pytest.skip" message="跳過整合測試（使用 --integration 運行）">/Users/tenyi/Projects/MyRag/tests/test_exceptions/test_recovery.py:600: 跳過整合測試（使用 --integration 運行）</skipped></testcase><testcase classname="tests.test_indexing.test_engine.TestGraphRAGIndexer" name="test_indexer_initialization" time="0.002" /><testcase classname="tests.test_indexing.test_engine.TestGraphRAGIndexer" name="test_create_text_units" time="0.002" /><testcase classname="tests.test_indexing.test_engine.TestGraphRAGIndexer" name="test_entity_and_relationship_extraction" time="0.001"><error message="failed on setup with &quot;file /Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py, line 89&#10;      @pytest.mark.asyncio&#10;      async def test_entity_and_relationship_extraction(self, indexer, sample_documents, mocker):&#10;          &quot;&quot;&quot;測試實體和關係提取的整合流程&quot;&quot;&quot;&#10;          import uuid&#10;          import json&#10;          from chinese_graphrag.models import Entity, Relationship&#10;&#10;          # 模擬 LLM 的回應&#10;          mock_llm_output = {&#10;              &quot;entities&quot;: [&#10;                  {&quot;name&quot;: &quot;張三博士&quot;, &quot;type&quot;: &quot;人物&quot;, &quot;description&quot;: &quot;在台灣大學進行研究的博士&quot;},&#10;                  {&quot;name&quot;: &quot;台灣大學&quot;, &quot;type&quot;: &quot;組織&quot;, &quot;description&quot;: &quot;台灣的一所頂尖大學&quot;}&#10;              ],&#10;              &quot;relationships&quot;: [&#10;                  {&quot;source&quot;: &quot;張三博士&quot;, &quot;target&quot;: &quot;台灣大學&quot;, &quot;description&quot;: &quot;張三博士在台灣大學工作&quot;}&#10;              ]&#10;          }&#10;&#10;          # 模擬 LLM 實例&#10;          mock_llm = mocker.AsyncMock()&#10;          mock_llm.async_generate.return_value = json.dumps(mock_llm_output)&#10;&#10;          # 模擬 create_llm 函數&#10;          mocker.patch(&#10;              &quot;chinese_graphrag.llm.create_llm&quot;,&#10;              return_value=mock_llm&#10;          )&#10;&#10;          # 建立文本單元&#10;          text_units = await indexer._create_text_units(sample_documents)&#10;&#10;          # 執行實體和關係提取&#10;          entities, relationships = await indexer._extract_entities_and_relationships(text_units)&#10;&#10;          # 驗證結果&#10;          assert len(entities) &gt; 0&#10;          assert len(relationships) &gt; 0&#10;&#10;          # 檢查實體和關係&#10;          entity_names = [e.name for e in entities]&#10;          assert &quot;張三博士&quot; in entity_names&#10;          assert &quot;台灣大學&quot; in entity_names&#10;E       fixture 'mocker' not found&#10;&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cleanup_files, config, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, indexer, insert_assert, insert_assert_add_to_builtins, insert_assert_maybe_fail, insert_assert_session, mock_embedding_service, mock_llm_service, mock_vector_store, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_documents, sample_entities, sample_relationships, sample_text, temp_dir, test_config, test_data_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py:89&quot;">file /Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py, line 89
      @pytest.mark.asyncio
      async def test_entity_and_relationship_extraction(self, indexer, sample_documents, mocker):
          """測試實體和關係提取的整合流程"""
          import uuid
          import json
          from chinese_graphrag.models import Entity, Relationship

          # 模擬 LLM 的回應
          mock_llm_output = {
              "entities": [
                  {"name": "張三博士", "type": "人物", "description": "在台灣大學進行研究的博士"},
                  {"name": "台灣大學", "type": "組織", "description": "台灣的一所頂尖大學"}
              ],
              "relationships": [
                  {"source": "張三博士", "target": "台灣大學", "description": "張三博士在台灣大學工作"}
              ]
          }

          # 模擬 LLM 實例
          mock_llm = mocker.AsyncMock()
          mock_llm.async_generate.return_value = json.dumps(mock_llm_output)

          # 模擬 create_llm 函數
          mocker.patch(
              "chinese_graphrag.llm.create_llm",
              return_value=mock_llm
          )

          # 建立文本單元
          text_units = await indexer._create_text_units(sample_documents)

          # 執行實體和關係提取
          entities, relationships = await indexer._extract_entities_and_relationships(text_units)

          # 驗證結果
          assert len(entities) &gt; 0
          assert len(relationships) &gt; 0

          # 檢查實體和關係
          entity_names = [e.name for e in entities]
          assert "張三博士" in entity_names
          assert "台灣大學" in entity_names
E       fixture 'mocker' not found
&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cleanup_files, config, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, indexer, insert_assert, insert_assert_add_to_builtins, insert_assert_maybe_fail, insert_assert_session, mock_embedding_service, mock_llm_service, mock_vector_store, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_documents, sample_entities, sample_relationships, sample_text, temp_dir, test_config, test_data_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py:89</error></testcase><testcase classname="tests.test_indexing.test_engine.TestGraphRAGIndexer" name="test_detect_communities" time="0.001"><error message="failed on setup with &quot;file /Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py, line 132&#10;      @pytest.mark.asyncio&#10;      async def test_detect_communities(self, indexer, mocker):&#10;          &quot;&quot;&quot;測試社群檢測&quot;&quot;&quot;&#10;          import uuid&#10;          from chinese_graphrag.models import Entity, Relationship, Community&#10;&#10;          # 準備模擬的實體和關係資料&#10;          entities = [&#10;              Entity(id=&quot;e1&quot;, name=&quot;張三&quot;, type=&quot;人物&quot;),&#10;              Entity(id=&quot;e2&quot;, name=&quot;台灣大學&quot;, type=&quot;組織&quot;),&#10;              Entity(id=&quot;e3&quot;, name=&quot;李四&quot;, type=&quot;人物&quot;),&#10;              Entity(id=&quot;e4&quot;, name=&quot;清華大學&quot;, type=&quot;組織&quot;),&#10;              Entity(id=&quot;e5&quot;, name=&quot;人工智慧&quot;, type=&quot;技術&quot;),&#10;          ]&#10;          relationships = [&#10;              Relationship(id=&quot;r1&quot;, source_entity_id=&quot;e1&quot;, target_entity_id=&quot;e2&quot;, description=&quot;畢業於&quot;),&#10;              Relationship(id=&quot;r2&quot;, source_entity_id=&quot;e3&quot;, target_entity_id=&quot;e4&quot;, description=&quot;畢業於&quot;),&#10;              Relationship(id=&quot;r3&quot;, source_entity_id=&quot;e1&quot;, target_entity_id=&quot;e5&quot;, description=&quot;研究領域&quot;),&#10;              Relationship(id=&quot;r4&quot;, source_entity_id=&quot;e3&quot;, target_entity_id=&quot;e5&quot;, description=&quot;研究領域&quot;),&#10;          ]&#10;&#10;          # 模擬社群檢測器的 detect_communities 方法&#10;          mock_communities = [&#10;              Community(&#10;                  id=&quot;c1&quot;,&#10;                  title=&quot;學術社群&quot;,&#10;                  level=1,&#10;                  entities=[&quot;e1&quot;, &quot;e2&quot;, &quot;e5&quot;],&#10;                  relationships=[&quot;r1&quot;, &quot;r3&quot;],&#10;                  summary=&quot;關於學術研究的社群&quot;&#10;              )&#10;          ]&#10;&#10;          mocker.patch.object(&#10;              indexer.community_detector,&#10;              &quot;detect_communities&quot;,&#10;              return_value=mock_communities&#10;          )&#10;&#10;          # 檢測社群&#10;          communities = await indexer._detect_communities(entities, relationships)&#10;&#10;          # 檢查結果&#10;          assert isinstance(communities, list)&#10;          assert len(communities) &gt; 0&#10;&#10;          # 檢查社群屬性&#10;          for community in communities:&#10;              assert community.id is not None&#10;              assert community.title is not None&#10;              assert community.level &gt;= 0&#10;              assert len(community.entities) &gt; 0&#10;              assert community.summary is not None&#10;E       fixture 'mocker' not found&#10;&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cleanup_files, config, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, indexer, insert_assert, insert_assert_add_to_builtins, insert_assert_maybe_fail, insert_assert_session, mock_embedding_service, mock_llm_service, mock_vector_store, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_documents, sample_entities, sample_relationships, sample_text, temp_dir, test_config, test_data_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py:132&quot;">file /Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py, line 132
      @pytest.mark.asyncio
      async def test_detect_communities(self, indexer, mocker):
          """測試社群檢測"""
          import uuid
          from chinese_graphrag.models import Entity, Relationship, Community

          # 準備模擬的實體和關係資料
          entities = [
              Entity(id="e1", name="張三", type="人物"),
              Entity(id="e2", name="台灣大學", type="組織"),
              Entity(id="e3", name="李四", type="人物"),
              Entity(id="e4", name="清華大學", type="組織"),
              Entity(id="e5", name="人工智慧", type="技術"),
          ]
          relationships = [
              Relationship(id="r1", source_entity_id="e1", target_entity_id="e2", description="畢業於"),
              Relationship(id="r2", source_entity_id="e3", target_entity_id="e4", description="畢業於"),
              Relationship(id="r3", source_entity_id="e1", target_entity_id="e5", description="研究領域"),
              Relationship(id="r4", source_entity_id="e3", target_entity_id="e5", description="研究領域"),
          ]

          # 模擬社群檢測器的 detect_communities 方法
          mock_communities = [
              Community(
                  id="c1",
                  title="學術社群",
                  level=1,
                  entities=["e1", "e2", "e5"],
                  relationships=["r1", "r3"],
                  summary="關於學術研究的社群"
              )
          ]

          mocker.patch.object(
              indexer.community_detector,
              "detect_communities",
              return_value=mock_communities
          )

          # 檢測社群
          communities = await indexer._detect_communities(entities, relationships)

          # 檢查結果
          assert isinstance(communities, list)
          assert len(communities) &gt; 0

          # 檢查社群屬性
          for community in communities:
              assert community.id is not None
              assert community.title is not None
              assert community.level &gt;= 0
              assert len(community.entities) &gt; 0
              assert community.summary is not None
E       fixture 'mocker' not found
&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cleanup_files, config, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, indexer, insert_assert, insert_assert_add_to_builtins, insert_assert_maybe_fail, insert_assert_session, mock_embedding_service, mock_llm_service, mock_vector_store, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_documents, sample_entities, sample_relationships, sample_text, temp_dir, test_config, test_data_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py:132</error></testcase><testcase classname="tests.test_indexing.test_engine.TestGraphRAGIndexer" name="test_create_embeddings" time="0.001"><error message="failed on setup with &quot;file /Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py, line 186&#10;      @pytest.mark.asyncio&#10;      async def test_create_embeddings(self, indexer, sample_documents, mocker):&#10;          &quot;&quot;&quot;測試向量嵌入建立&quot;&quot;&quot;&#10;          import numpy as np&#10;          import json&#10;&#10;          # 準備模擬資料&#10;          from chinese_graphrag.models import TextUnit, Entity, Community&#10;&#10;          text_units = [&#10;              TextUnit(&#10;                  id=f&quot;{doc.id}_chunk_0&quot;,&#10;                  text=doc.content[:50],&#10;                  document_id=doc.id,&#10;                  chunk_index=0,&#10;                  metadata={&quot;document_title&quot;: doc.title}&#10;              )&#10;              for doc in sample_documents&#10;          ]&#10;&#10;          entities = [&#10;              Entity(id=&quot;e1&quot;, name=&quot;張三博士&quot;, type=&quot;人物&quot;, text_units=[text_units[0].id]),&#10;              Entity(id=&quot;e2&quot;, name=&quot;台灣大學&quot;, type=&quot;組織&quot;, text_units=[text_units[0].id])&#10;          ]&#10;&#10;          communities = [&#10;              Community(&#10;                  id=&quot;c1&quot;,&#10;                  title=&quot;學術社群&quot;,&#10;                  level=1,&#10;                  entities=[&quot;e1&quot;, &quot;e2&quot;],&#10;                  relationships=[&quot;r1&quot;],&#10;                  summary=&quot;關於學術研究的社群&quot;&#10;              )&#10;          ]&#10;&#10;          # 模擬 embed_texts 方法&#10;          mock_text_embeddings = np.random.rand(len(text_units), 768)  # 文本單元嵌入&#10;          mock_entity_embeddings = np.random.rand(len(entities), 768)  # 實體嵌入&#10;          mock_community_embeddings = np.random.rand(len(communities), 768)  # 社群嵌入&#10;&#10;          # 建立 AsyncMock 來模擬 embed_texts 方法&#10;          mock_embed_texts = mocker.AsyncMock()&#10;          mock_embed_texts.side_effect = [mock_text_embeddings, mock_entity_embeddings, mock_community_embeddings]&#10;&#10;          # model_selector 已被移除，不需要模擬&#10;&#10;          # 替換 EmbeddingManager 的 embed_texts 方法&#10;          mocker.patch.object(&#10;              indexer.embedding_manager,&#10;              &quot;embed_texts&quot;,&#10;              mock_embed_texts&#10;          )&#10;&#10;          # 模擬 vector_store_manager 的方法&#10;          mock_store_text_unit = mocker.AsyncMock()&#10;          mock_store_entity = mocker.AsyncMock()&#10;          mock_store_community = mocker.AsyncMock()&#10;          mocker.patch.object(indexer.vector_store_manager, &quot;store_text_unit&quot;, mock_store_text_unit)&#10;          mocker.patch.object(indexer.vector_store_manager, &quot;store_entity&quot;, mock_store_entity)&#10;          mocker.patch.object(indexer.vector_store_manager, &quot;store_community&quot;, mock_store_community)&#10;&#10;          # 建立嵌入&#10;          await indexer._create_embeddings(text_units, entities, communities)&#10;&#10;          # 驗證 embed_texts 被正確呼叫&#10;          assert mock_embed_texts.call_count == 3&#10;&#10;          # 驗證文本單元和實體的嵌入已設置&#10;          for i, unit in enumerate(text_units):&#10;              assert unit.embedding is not None&#10;              np.testing.assert_array_equal(unit.embedding, mock_text_embeddings[i])&#10;&#10;          for i, entity in enumerate(entities):&#10;              assert entity.embedding is not None&#10;              np.testing.assert_array_equal(entity.embedding, mock_entity_embeddings[i])&#10;&#10;          for i, community in enumerate(communities):&#10;              assert community.embedding is not None&#10;              np.testing.assert_array_equal(community.embedding, mock_community_embeddings[i])&#10;&#10;          # 驗證向量存儲方法被呼叫&#10;          assert mock_store_text_unit.call_count == len(text_units)&#10;          assert mock_store_entity.call_count == len(entities)&#10;          assert mock_store_community.call_count == len(communities)&#10;E       fixture 'mocker' not found&#10;&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cleanup_files, config, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, indexer, insert_assert, insert_assert_add_to_builtins, insert_assert_maybe_fail, insert_assert_session, mock_embedding_service, mock_llm_service, mock_vector_store, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_documents, sample_entities, sample_relationships, sample_text, temp_dir, test_config, test_data_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py:186&quot;">file /Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py, line 186
      @pytest.mark.asyncio
      async def test_create_embeddings(self, indexer, sample_documents, mocker):
          """測試向量嵌入建立"""
          import numpy as np
          import json

          # 準備模擬資料
          from chinese_graphrag.models import TextUnit, Entity, Community

          text_units = [
              TextUnit(
                  id=f"{doc.id}_chunk_0",
                  text=doc.content[:50],
                  document_id=doc.id,
                  chunk_index=0,
                  metadata={"document_title": doc.title}
              )
              for doc in sample_documents
          ]

          entities = [
              Entity(id="e1", name="張三博士", type="人物", text_units=[text_units[0].id]),
              Entity(id="e2", name="台灣大學", type="組織", text_units=[text_units[0].id])
          ]

          communities = [
              Community(
                  id="c1",
                  title="學術社群",
                  level=1,
                  entities=["e1", "e2"],
                  relationships=["r1"],
                  summary="關於學術研究的社群"
              )
          ]

          # 模擬 embed_texts 方法
          mock_text_embeddings = np.random.rand(len(text_units), 768)  # 文本單元嵌入
          mock_entity_embeddings = np.random.rand(len(entities), 768)  # 實體嵌入
          mock_community_embeddings = np.random.rand(len(communities), 768)  # 社群嵌入

          # 建立 AsyncMock 來模擬 embed_texts 方法
          mock_embed_texts = mocker.AsyncMock()
          mock_embed_texts.side_effect = [mock_text_embeddings, mock_entity_embeddings, mock_community_embeddings]

          # model_selector 已被移除，不需要模擬

          # 替換 EmbeddingManager 的 embed_texts 方法
          mocker.patch.object(
              indexer.embedding_manager,
              "embed_texts",
              mock_embed_texts
          )

          # 模擬 vector_store_manager 的方法
          mock_store_text_unit = mocker.AsyncMock()
          mock_store_entity = mocker.AsyncMock()
          mock_store_community = mocker.AsyncMock()
          mocker.patch.object(indexer.vector_store_manager, "store_text_unit", mock_store_text_unit)
          mocker.patch.object(indexer.vector_store_manager, "store_entity", mock_store_entity)
          mocker.patch.object(indexer.vector_store_manager, "store_community", mock_store_community)

          # 建立嵌入
          await indexer._create_embeddings(text_units, entities, communities)

          # 驗證 embed_texts 被正確呼叫
          assert mock_embed_texts.call_count == 3

          # 驗證文本單元和實體的嵌入已設置
          for i, unit in enumerate(text_units):
              assert unit.embedding is not None
              np.testing.assert_array_equal(unit.embedding, mock_text_embeddings[i])

          for i, entity in enumerate(entities):
              assert entity.embedding is not None
              np.testing.assert_array_equal(entity.embedding, mock_entity_embeddings[i])

          for i, community in enumerate(communities):
              assert community.embedding is not None
              np.testing.assert_array_equal(community.embedding, mock_community_embeddings[i])

          # 驗證向量存儲方法被呼叫
          assert mock_store_text_unit.call_count == len(text_units)
          assert mock_store_entity.call_count == len(entities)
          assert mock_store_community.call_count == len(communities)
E       fixture 'mocker' not found
&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cleanup_files, config, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, indexer, insert_assert, insert_assert_add_to_builtins, insert_assert_maybe_fail, insert_assert_session, mock_embedding_service, mock_llm_service, mock_vector_store, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_documents, sample_entities, sample_relationships, sample_text, temp_dir, test_config, test_data_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py:186</error></testcase><testcase classname="tests.test_indexing.test_engine.TestGraphRAGIndexer" name="test_get_statistics" time="0.001" /><testcase classname="tests.test_indexing.test_engine.TestGraphRAGIndexer" name="test_clear_index" time="0.001" /><testcase classname="tests.test_indexing.test_engine.TestGraphRAGIndexer" name="test_full_indexing_workflow" time="0.001"><error message="failed on setup with &quot;file /Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py, line 301&#10;      @pytest.mark.asyncio&#10;      async def test_full_indexing_workflow(self, indexer, sample_documents, mocker):&#10;          &quot;&quot;&quot;測試完整的索引工作流程&quot;&quot;&quot;&#10;          import numpy as np&#10;          from chinese_graphrag.models import TextUnit, Entity, Relationship, Community&#10;&#10;          # 模擬文件處理&#10;          mock_process_documents = mocker.patch.object(&#10;              indexer,&#10;              &quot;_process_documents&quot;,&#10;              return_value=sample_documents&#10;          )&#10;&#10;          # 模擬文本單元建立&#10;          text_units = [&#10;              TextUnit(&#10;                  id=f&quot;{doc.id}_chunk_0&quot;,&#10;                  text=doc.content[:50],&#10;                  document_id=doc.id,&#10;                  chunk_index=0,&#10;                  metadata={&quot;document_title&quot;: doc.title}&#10;              )&#10;              for doc in sample_documents&#10;          ]&#10;          mock_create_text_units = mocker.patch.object(&#10;              indexer,&#10;              &quot;_create_text_units&quot;,&#10;              return_value=text_units&#10;          )&#10;&#10;          # 模擬實體和關係提取&#10;          entities = [&#10;              Entity(id=&quot;e1&quot;, name=&quot;張三博士&quot;, type=&quot;人物&quot;, text_units=[text_units[0].id]),&#10;              Entity(id=&quot;e2&quot;, name=&quot;台灣大學&quot;, type=&quot;組織&quot;, text_units=[text_units[0].id])&#10;          ]&#10;          relationships = [&#10;              Relationship(&#10;                  id=&quot;r1&quot;,&#10;                  source_entity_id=&quot;e1&quot;,&#10;                  target_entity_id=&quot;e2&quot;,&#10;                  relationship_type=&quot;工作於&quot;,&#10;                  description=&quot;張三博士在台灣大學工作&quot;,&#10;                  text_units=[text_units[0].id]&#10;              )&#10;          ]&#10;          mock_extract = mocker.patch.object(&#10;              indexer,&#10;              &quot;_extract_entities_and_relationships&quot;,&#10;              return_value=(entities, relationships)&#10;          )&#10;&#10;          # 模擬社群檢測&#10;          communities = [&#10;              Community(&#10;                  id=&quot;c1&quot;,&#10;                  title=&quot;學術社群&quot;,&#10;                  level=1,&#10;                  entities=[&quot;e1&quot;, &quot;e2&quot;],&#10;                  relationships=[&quot;r1&quot;],&#10;                  summary=&quot;關於學術研究的社群&quot;&#10;              )&#10;          ]&#10;          mock_detect = mocker.patch.object(&#10;              indexer,&#10;              &quot;_detect_communities&quot;,&#10;              return_value=communities&#10;          )&#10;&#10;          # 模擬嵌入建立&#10;          mock_create_embeddings = mocker.patch.object(&#10;              indexer,&#10;              &quot;_create_embeddings&quot;,&#10;              return_value=None&#10;          )&#10;&#10;          # 模擬結果儲存&#10;          mock_save_results = mocker.patch.object(&#10;              indexer,&#10;              &quot;_save_results&quot;,&#10;              return_value=None&#10;          )&#10;&#10;          # 執行索引流程&#10;          with tempfile.TemporaryDirectory() as temp_dir:&#10;              input_path = Path(temp_dir) / &quot;input&quot;&#10;              output_path = Path(temp_dir) / &quot;output&quot;&#10;              input_path.mkdir()&#10;&#10;              # 執行索引&#10;              stats = await indexer.index_documents(input_path, output_path)&#10;&#10;              # 驗證各個方法被正確呼叫&#10;              mock_process_documents.assert_called_once_with(input_path)&#10;              mock_create_text_units.assert_called_once_with(sample_documents)&#10;              mock_extract.assert_called_once_with(text_units)&#10;              mock_detect.assert_called_once_with(entities, relationships)&#10;              mock_create_embeddings.assert_called_once()&#10;              mock_save_results.assert_called_once_with(output_path)&#10;&#10;              # 驗證統計結果&#10;              assert isinstance(stats, dict)&#10;              assert stats[&quot;documents&quot;] == len(sample_documents)&#10;              assert stats[&quot;text_units&quot;] == len(text_units)&#10;              assert stats[&quot;entities&quot;] == len(entities)&#10;              assert stats[&quot;relationships&quot;] == len(relationships)&#10;              assert stats[&quot;communities&quot;] == len(communities)&#10;&#10;              # 驗證索引狀態已更新&#10;              for doc in sample_documents:&#10;                  assert doc.id in indexer.indexed_documents&#10;              for unit in text_units:&#10;                  assert unit.id in indexer.text_units&#10;              for entity in entities:&#10;                  assert entity.id in indexer.entities&#10;              for rel in relationships:&#10;                  assert rel.id in indexer.relationships&#10;              for comm in communities:&#10;                  assert comm.id in indexer.communities&#10;E       fixture 'mocker' not found&#10;&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cleanup_files, config, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, indexer, insert_assert, insert_assert_add_to_builtins, insert_assert_maybe_fail, insert_assert_session, mock_embedding_service, mock_llm_service, mock_vector_store, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_documents, sample_entities, sample_relationships, sample_text, temp_dir, test_config, test_data_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory&#10;&gt;       use 'pytest --fixtures [testpath]' for help on them.&#10;&#10;/Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py:301&quot;">file /Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py, line 301
      @pytest.mark.asyncio
      async def test_full_indexing_workflow(self, indexer, sample_documents, mocker):
          """測試完整的索引工作流程"""
          import numpy as np
          from chinese_graphrag.models import TextUnit, Entity, Relationship, Community

          # 模擬文件處理
          mock_process_documents = mocker.patch.object(
              indexer,
              "_process_documents",
              return_value=sample_documents
          )

          # 模擬文本單元建立
          text_units = [
              TextUnit(
                  id=f"{doc.id}_chunk_0",
                  text=doc.content[:50],
                  document_id=doc.id,
                  chunk_index=0,
                  metadata={"document_title": doc.title}
              )
              for doc in sample_documents
          ]
          mock_create_text_units = mocker.patch.object(
              indexer,
              "_create_text_units",
              return_value=text_units
          )

          # 模擬實體和關係提取
          entities = [
              Entity(id="e1", name="張三博士", type="人物", text_units=[text_units[0].id]),
              Entity(id="e2", name="台灣大學", type="組織", text_units=[text_units[0].id])
          ]
          relationships = [
              Relationship(
                  id="r1",
                  source_entity_id="e1",
                  target_entity_id="e2",
                  relationship_type="工作於",
                  description="張三博士在台灣大學工作",
                  text_units=[text_units[0].id]
              )
          ]
          mock_extract = mocker.patch.object(
              indexer,
              "_extract_entities_and_relationships",
              return_value=(entities, relationships)
          )

          # 模擬社群檢測
          communities = [
              Community(
                  id="c1",
                  title="學術社群",
                  level=1,
                  entities=["e1", "e2"],
                  relationships=["r1"],
                  summary="關於學術研究的社群"
              )
          ]
          mock_detect = mocker.patch.object(
              indexer,
              "_detect_communities",
              return_value=communities
          )

          # 模擬嵌入建立
          mock_create_embeddings = mocker.patch.object(
              indexer,
              "_create_embeddings",
              return_value=None
          )

          # 模擬結果儲存
          mock_save_results = mocker.patch.object(
              indexer,
              "_save_results",
              return_value=None
          )

          # 執行索引流程
          with tempfile.TemporaryDirectory() as temp_dir:
              input_path = Path(temp_dir) / "input"
              output_path = Path(temp_dir) / "output"
              input_path.mkdir()

              # 執行索引
              stats = await indexer.index_documents(input_path, output_path)

              # 驗證各個方法被正確呼叫
              mock_process_documents.assert_called_once_with(input_path)
              mock_create_text_units.assert_called_once_with(sample_documents)
              mock_extract.assert_called_once_with(text_units)
              mock_detect.assert_called_once_with(entities, relationships)
              mock_create_embeddings.assert_called_once()
              mock_save_results.assert_called_once_with(output_path)

              # 驗證統計結果
              assert isinstance(stats, dict)
              assert stats["documents"] == len(sample_documents)
              assert stats["text_units"] == len(text_units)
              assert stats["entities"] == len(entities)
              assert stats["relationships"] == len(relationships)
              assert stats["communities"] == len(communities)

              # 驗證索引狀態已更新
              for doc in sample_documents:
                  assert doc.id in indexer.indexed_documents
              for unit in text_units:
                  assert unit.id in indexer.text_units
              for entity in entities:
                  assert entity.id in indexer.entities
              for rel in relationships:
                  assert rel.id in indexer.relationships
              for comm in communities:
                  assert comm.id in indexer.communities
E       fixture 'mocker' not found
&gt;       available fixtures: _class_scoped_runner, _function_scoped_runner, _module_scoped_runner, _package_scoped_runner, _session_scoped_runner, anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, cleanup_files, config, cov, doctest_namespace, event_loop, event_loop_policy, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, indexer, insert_assert, insert_assert_add_to_builtins, insert_assert_maybe_fail, insert_assert_session, mock_embedding_service, mock_llm_service, mock_vector_store, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_documents, sample_entities, sample_relationships, sample_text, temp_dir, test_config, test_data_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory, unused_tcp_port, unused_tcp_port_factory, unused_udp_port, unused_udp_port_factory
&gt;       use 'pytest --fixtures [testpath]' for help on them.

/Users/tenyi/Projects/MyRag/tests/test_indexing/test_engine.py:301</error></testcase><testcase classname="tests.test_models.test_base.TestBaseModel" name="test_create_model_with_defaults" time="0.000" /><testcase classname="tests.test_models.test_base.TestBaseModel" name="test_create_model_with_custom_values" time="0.000" /><testcase classname="tests.test_models.test_base.TestBaseModel" name="test_update_timestamp" time="0.002" /><testcase classname="tests.test_models.test_base.TestBaseModel" name="test_to_dict" time="0.001" /><testcase classname="tests.test_models.test_base.TestBaseModel" name="test_from_dict" time="0.000" /><testcase classname="tests.test_models.test_base.TestBaseModel" name="test_to_json" time="0.000" /><testcase classname="tests.test_models.test_base.TestBaseModel" name="test_from_json" time="0.001" /><testcase classname="tests.test_models.test_base.TestBaseModel" name="test_validation_on_assignment" time="0.000" /><testcase classname="tests.test_models.test_base.TestBaseModel" name="test_exclude_none_in_serialization" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_create_community_with_required_fields" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_create_community_with_all_fields" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_title_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_level_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_summary_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_full_content_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_entities_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_relationships_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_child_communities_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_embedding_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_rank_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_size_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_density_validation" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_properties" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_add_entity" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_remove_entity" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_add_relationship" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_remove_relationship" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_add_child_community" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_remove_child_community" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_update_rank" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_calculate_size" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_get_summary_preview" time="0.000" /><testcase classname="tests.test_models.test_community.TestCommunity" name="test_serialization" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_create_document_with_required_fields" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_create_document_with_all_fields" time="0.001" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_title_validation" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_content_validation" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_file_path_validation" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_language_validation" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_file_size_validation" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_file_name_property" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_file_extension_property" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_content_length_property" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_get_summary" time="0.000" /><testcase classname="tests.test_models.test_document.TestDocument" name="test_serialization" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_create_entity_with_required_fields" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_create_entity_with_all_fields" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_name_validation" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_type_validation" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_description_validation" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_text_units_validation" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_rank_validation" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_frequency_validation" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_confidence_validation" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_embedding_validation" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_properties" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_add_text_unit" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_remove_text_unit" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_update_rank" time="0.000" /><testcase classname="tests.test_models.test_entity.TestEntity" name="test_serialization" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_create_relationship_with_required_fields" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_create_relationship_with_all_fields" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_source_entity_id_validation" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_target_entity_id_validation" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_relationship_type_validation" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_description_validation" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_weight_validation" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_text_units_validation" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_confidence_validation" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_frequency_validation" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_properties" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_add_text_unit" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_remove_text_unit" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_update_weight" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_get_reverse_relationship" time="0.000" /><testcase classname="tests.test_models.test_relationship.TestRelationship" name="test_serialization" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_create_text_unit_with_required_fields" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_create_text_unit_with_all_fields" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_text_validation" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_document_id_validation" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_chunk_index_validation" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_position_validation" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_embedding_validation" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_token_count_validation" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_text_length_property" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_has_embedding_property" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_embedding_dimension_property" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_get_text_preview" time="0.000" /><testcase classname="tests.test_models.test_text_unit.TestTextUnit" name="test_serialization" time="0.000" /><testcase classname="tests.test_monitoring_system.TestLoggerManager" name="test_setup_logging_with_default_config" time="0.013" /><testcase classname="tests.test_monitoring_system.TestLoggerManager" name="test_get_logger_with_context" time="0.013" /><testcase classname="tests.test_monitoring_system.TestLoggerManager" name="test_update_log_level" time="0.024" /><testcase classname="tests.test_monitoring_system.TestLoggerManager" name="test_json_logging" time="0.008" /><testcase classname="tests.test_monitoring_system.TestErrorTracker" name="test_track_exception" time="0.002" /><testcase classname="tests.test_monitoring_system.TestErrorTracker" name="test_track_string_error" time="0.001" /><testcase classname="tests.test_monitoring_system.TestErrorTracker" name="test_error_aggregation" time="0.002" /><testcase classname="tests.test_monitoring_system.TestErrorTracker" name="test_error_stats" time="0.001" /><testcase classname="tests.test_monitoring_system.TestErrorTracker" name="test_alert_callback" time="0.001" /><testcase classname="tests.test_monitoring_system.TestErrorTracker" name="test_export_errors" time="0.001" /><testcase classname="tests.test_monitoring_system.TestMetricsCollector" name="test_record_counter" time="0.001" /><testcase classname="tests.test_monitoring_system.TestMetricsCollector" name="test_record_gauge" time="0.001" /><testcase classname="tests.test_monitoring_system.TestMetricsCollector" name="test_record_timer" time="0.001" /><testcase classname="tests.test_monitoring_system.TestMetricsCollector" name="test_timer_context_manager" time="0.014" /><testcase classname="tests.test_monitoring_system.TestMetricsCollector" name="test_system_metrics_collection" time="1.013" /><testcase classname="tests.test_monitoring_system.TestMetricsCollector" name="test_export_metrics" time="0.007" /><testcase classname="tests.test_monitoring_system.TestSystemMonitor" name="test_collect_system_stats" time="1.011" /><testcase classname="tests.test_monitoring_system.TestSystemMonitor" name="test_system_monitoring_lifecycle" time="2.017" /><testcase classname="tests.test_monitoring_system.TestSystemMonitor" name="test_get_process_stats" time="0.038" /><testcase classname="tests.test_monitoring_system.TestSystemMonitor" name="test_health_checks" time="0.000" /><testcase classname="tests.test_monitoring_system.TestSystemMonitor" name="test_alert_system" time="0.001" /><testcase classname="tests.test_monitoring_system.TestIntegration" name="test_monitoring_system_integration" time="1.040" /><testcase classname="tests.test_processors.test_base.TestBaseDocumentProcessor" name="test_can_process_supported_extension" time="0.001" /><testcase classname="tests.test_processors.test_base.TestBaseDocumentProcessor" name="test_validate_file_not_exists" time="0.000" /><testcase classname="tests.test_processors.test_base.TestBaseDocumentProcessor" name="test_validate_file_not_readable" time="0.003" /><testcase classname="tests.test_processors.test_base.TestBaseDocumentProcessor" name="test_detect_encoding_utf8" time="0.002" /><testcase classname="tests.test_processors.test_base.TestBaseDocumentProcessor" name="test_get_file_info" time="0.001" /><testcase classname="tests.test_processors.test_base.TestBaseDocumentProcessor" name="test_create_document" time="0.001" /><testcase classname="tests.test_processors.test_base.TestDocumentProcessorManager" name="test_register_processor" time="0.001" /><testcase classname="tests.test_processors.test_base.TestDocumentProcessorManager" name="test_get_processor" time="0.001" /><testcase classname="tests.test_processors.test_base.TestDocumentProcessorManager" name="test_can_process" time="0.001" /><testcase classname="tests.test_processors.test_base.TestDocumentProcessorManager" name="test_process_file_unsupported_format" time="0.001" /><testcase classname="tests.test_processors.test_base.TestDocumentProcessorManager" name="test_process_file_success" time="0.002" /><testcase classname="tests.test_processors.test_base.TestDocumentProcessorManager" name="test_batch_process_directory_not_exists" time="0.001" /><testcase classname="tests.test_processors.test_base.TestDocumentProcessorManager" name="test_batch_process_success" time="0.003" /><testcase classname="tests.test_processors.test_base.TestDocumentProcessorManager" name="test_get_supported_extensions" time="0.001" /><testcase classname="tests.test_processors.test_base.TestDocumentProcessorManager" name="test_get_processor_info" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_init_default" time="0.002" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_init_with_params" time="0.002" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_clean_text_basic" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_clean_text_special_chars" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_clean_text_punctuation_normalization" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_clean_text_empty" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_segment_text_basic" time="0.013" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_segment_text_keep_stopwords" time="0.002" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_segment_text_no_pos_filter" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_segment_text_empty" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_extract_keywords_basic" time="0.049" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_extract_keywords_empty" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_split_into_sentences" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_split_text_into_chunks_basic" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_split_text_into_chunks_empty" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_split_text_into_chunks_small_text" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_split_text_into_chunks_custom_size" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_get_text_statistics_comprehensive" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_get_text_statistics_empty" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_get_text_statistics_chinese_only" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_get_text_statistics_english_only" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_custom_stopwords_file" time="0.027" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_custom_dict_integration" time="0.002" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_normalize_punctuation" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_integration_with_real_chinese_text" time="0.235" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_preprocess_for_entity_recognition_basic" time="0.025" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_preprocess_for_entity_recognition_empty" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_extract_entity_patterns_comprehensive" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_evaluate_text_quality_good_text" time="0.162" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_evaluate_text_quality_poor_text" time="0.004" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_evaluate_text_quality_empty" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_extract_named_entities_candidates_basic" time="0.072" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_extract_named_entities_candidates_confidence_threshold" time="0.032" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_extract_named_entities_candidates_empty" time="0.001" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_entity_recognition_integration" time="0.290" /><testcase classname="tests.test_processors.test_chinese_text_processor.TestChineseTextProcessor" name="test_text_quality_with_entity_patterns" time="0.330" /><testcase classname="tests.test_processors.test_text_processor.TestTextProcessor" name="test_supported_extensions" time="0.000" /><testcase classname="tests.test_processors.test_text_processor.TestTextProcessor" name="test_extract_content_success" time="0.002" /><testcase classname="tests.test_processors.test_text_processor.TestTextProcessor" name="test_extract_content_empty_file" time="0.001" /><testcase classname="tests.test_processors.test_text_processor.TestTextProcessor" name="test_extract_content_whitespace_only" time="0.001" /><testcase classname="tests.test_processors.test_text_processor.TestTextProcessor" name="test_process_file_success" time="0.001" /><testcase classname="tests.test_processors.test_text_processor.TestTextProcessor" name="test_process_file_with_chinese_content" time="0.002" /><testcase classname="tests.test_processors.test_text_processor.TestMarkdownProcessor" name="test_supported_extensions" time="0.017" /><testcase classname="tests.test_processors.test_text_processor.TestMarkdownProcessor" name="test_extract_content_simple_markdown" time="0.003" /><testcase classname="tests.test_processors.test_text_processor.TestMarkdownProcessor" name="test_extract_content_with_code_blocks" time="0.035" /><testcase classname="tests.test_processors.test_text_processor.TestMarkdownProcessor" name="test_extract_raw_content" time="0.001" /><testcase classname="tests.test_processors.test_text_processor.TestMarkdownProcessor" name="test_process_file_success" time="0.002" /><testcase classname="tests.test_processors.test_text_processor.TestMarkdownProcessor" name="test_extract_content_empty_markdown" time="0.001" /><testcase classname="tests.test_query.test_query_system.TestLLMManager" name="test_generate_with_mock_llm" time="0.103" /><testcase classname="tests.test_query.test_query_system.TestLLMManager" name="test_health_check" time="0.002" /><testcase classname="tests.test_query.test_query_system.TestLLMManager" name="test_get_metrics" time="0.001" /><testcase classname="tests.test_query.test_query_system.TestLLMManager" name="test_get_adapter_info" time="0.001" /><testcase classname="tests.test_query.test_query_system.TestChineseQueryProcessor" name="test_process_entity_query" time="0.014" /><testcase classname="tests.test_query.test_query_system.TestChineseQueryProcessor" name="test_process_relationship_query" time="0.002" /><testcase classname="tests.test_query.test_query_system.TestChineseQueryProcessor" name="test_process_global_query" time="0.001" /><testcase classname="tests.test_query.test_query_system.TestChineseQueryProcessor" name="test_extract_keywords" time="0.001" /><testcase classname="tests.test_query.test_query_system.TestChineseQueryProcessor" name="test_suggest_query_enhancement" time="0.001" /><testcase classname="tests.test_query.test_query_system.TestGlobalSearchEngine" name="test_global_search" time="0.105" /><testcase classname="tests.test_query.test_query_system.TestGlobalSearchEngine" name="test_health_check" time="0.004" /><testcase classname="tests.test_query.test_query_system.TestGlobalSearchEngine" name="test_get_available_strategies" time="0.002" /><testcase classname="tests.test_query.test_query_system.TestLocalSearchEngine" name="test_local_search" time="0.107" /><testcase classname="tests.test_query.test_query_system.TestQueryEngine" name="test_simple_query" time="0.220" /><testcase classname="tests.test_query.test_query_system.TestQueryEngine" name="test_global_search_query" time="0.217" /><testcase classname="tests.test_query.test_query_system.TestQueryEngine" name="test_local_search_query" time="0.116" /><testcase classname="tests.test_query.test_query_system.TestQueryEngine" name="test_hybrid_search_query" time="0.222" /><testcase classname="tests.test_query.test_query_system.TestQueryEngine" name="test_batch_query" time="0.445" /><testcase classname="tests.test_query.test_query_system.TestQueryEngine" name="test_get_engine_status" time="0.003" /><testcase classname="tests.test_query.test_query_system.TestQueryEngine" name="test_health_check" time="0.004" /><testcase classname="tests.test_query.test_query_system.TestQueryEngine" name="test_clear_cache" time="0.004" /><testcase classname="tests.test_query.test_query_system.TestIntegration" name="test_end_to_end_query_flow" time="0.753" /><testcase classname="tests.test_query.test_query_system.TestIntegration" name="test_query_result_serialization" time="0.004" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_connection" time="0.022" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_collection_management" time="0.101" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_vector_operations" time="0.025" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_vector_search" time="0.029" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_vector_update_and_delete" time="0.028" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_health_check" time="0.003" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_context_manager" time="0.009" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_error_handling" time="0.009" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_hybrid_search" time="0.016" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_sparse_search" time="0.012" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_index_optimization" time="0.015" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_search_filter" time="0.014" /><testcase classname="tests.test_vector_stores.test_lancedb_store.TestLanceDBStore" name="test_disconnected_operations" time="0.002" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_manager_initialization" time="0.003" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_create_vector_store_manager" time="0.003" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_collection_operations" time="0.012" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_vector_operations" time="0.031" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_health_check" time="0.003" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_statistics" time="0.010" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_context_manager" time="0.004" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_error_handling" time="0.010" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_hybrid_search_manager" time="0.015" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_index_optimization_manager" time="0.014" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_search_filter_manager" time="0.015" /><testcase classname="tests.test_vector_stores.test_manager.TestVectorStoreManager" name="test_multiple_stores" time="0.019" /></testsuite></testsuites>